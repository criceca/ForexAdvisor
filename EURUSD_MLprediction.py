# -*- coding: utf-8 -*-
"""Primeros pasos CEWI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S1hzZAV9UVtciE14MwPSNmBQobf9UNav

**Libraries imported and installed**
"""

import pandas as pd
import numpy as np
import matplotlib as mpl
import seaborn as sns
import matplotlib.pyplot as plt
from pandas_datareader import data as wb
import time
import datetime

import requests
from datetime import timezone
from pandas_datareader import data
from pandas_datareader._utils import RemoteDataError
from datetime import datetime

!pip install yfinance
import yfinance as yahooFinance

"""Forex data load function. Data source: yahoofinance"""

def get_data(startDate,endDate,stocklist):
    df_list = []
    for stock in stocklist:
      #var = "Datos_{}".format(stock)
      P = yahooFinance.Ticker(stock)
      Datos = P.history(start=startDate,end=endDate)
      dfd=Datos.assign(ticker=stock)
      df=dfd.reset_index()
      df_clean=df[df['Date'].dt.week.shift(-1)!=df['Date'].dt.day].reset_index(drop=True)
      df_n=df_clean.loc[:,['Date','Open', 'High', 'Low','Close','ticker']]  
      df_list.append(df_n)
      df_final=pd.concat(df_list)
      df_f=df_final.pivot(index='Date', columns='ticker', values='Close')
      df_all=df_final.pivot(index='Date', columns='ticker',values=['Open', 'High', 'Low', 'Close'])
      df_f=df_f.fillna(method='ffill') 
      df_all=df_all.droplevel('ticker',axis=1)
    df_fc=df_f.copy()
    return df_fc,df_all

# startDate , as per our convenience we can modify
startDate = datetime(2015, 1, 1)
 
# endDate , as per our convenience we can modify
endDate = datetime(2021, 12, 31)

# stock-currency list
stocklist = ['EURUSD=X']

df_fc, df_all= get_data(startDate,endDate,stocklist)

"""# Features enginnering"""

conditions = [df_all['Close']-df_all['Open']> 0, df_all['Close']-df_all['Open']< 0, df_all['Close']-df_all['Open']==0]
choices = ['Green', 'Red', 'Doji']
df_all["Cs Color"] = np.select(conditions, choices, default=np.nan)
df_all_2 = pd.Series(list(df_all['Cs Color'])[1:], index=df_all.index[0:-1])
df_all["NCC"] =  df_all_2
df_all = df_all[0:-1]
df_all.head()

# Tomamos características y variable de  predicción
X = df_all.drop(columns=['NCC'])
y = df_all['NCC']
# OneHotEnconder
def ohe(X):
  aux_x = pd.get_dummies(X['Cs Color'], prefix='Color')
  X_2 = X.drop(columns=['Cs Color'])
  return pd.concat([X_2, aux_x], axis=1)
X_N = ohe(X)
X_N.head()

"""**Tecnical analysis indicators from pandas_ta library** """

!pip install pandas_ta

import pandas_ta as ta

X_N=X_N.rename(columns={'Close':'close','High':'high','Low':'low','Open':'Open'})

ao_i=X_N.ta.ao(fast=4,slow=35)
X_N['AO']=ao_i
atr_i=X_N.ta.atr(mamode='sma')
X_N['ATR']=atr_i
rsi_i=X_N.ta.rsi()
X_N['RSI']=rsi_i
X_Nf=X_N[35:len(X_N)]
y=y[35:len(y)]

X_Nf.head()

"""# **Machine learning libraries used from sklearn**"""

#Modelos
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
import lightgbm as lgb
from sklearn.metrics import confusion_matrix, accuracy_score
# from sklearn.cluster import KMeans

# Partición de datos
X_train, X_test, Y_train, Y_test = train_test_split(X_Nf, y, test_size=0.3)

"""**Logistic regression** """

model_1 = LogisticRegression(max_iter=500, multi_class='multinomial')
model_1.fit(X_train, Y_train)

y_p = model_1.predict(X_test)
#Matriz de confusión regresión logística
MRL = confusion_matrix(Y_test, y_p)
MRL = {'Doji': MRL[:, 0], 'Green': MRL[:,1], 'Red': MRL[:,2]}
MRL = pd.DataFrame(MRL, index= model_1.classes_)
MRL.head()

# Precisión del método
print('La precisión del método es: {}'.format(round( accuracy_score(Y_test, y_p), 3)))

"""# SVM#"""

model_2 = SVC()
model_2.fit(X_train, Y_train)

y_p_s = model_2.predict(X_test)
MS = confusion_matrix(Y_test, y_p_s)
MS = {'Doji': MS[:, 0], 'Green': MS[:,1], 'Red': MS[:,2]}
MS = pd.DataFrame(MS, index= model_2.classes_)
MS.head()

# Precisión del método
print('La precisión del método es: {}'.format(round( accuracy_score(Y_test, y_p_s), 3)))

"""# LightGBM #"""

model_3 =  lgb.LGBMClassifier()
model_3.fit(X_train, Y_train)

y_p_l = model_3.predict(X_test)
Mlg = confusion_matrix(Y_test, y_p_l)
Mlg = {'Doji': Mlg[:, 0], 'Green': Mlg[:,1], 'Red': Mlg[:,2]}
Mlg = pd.DataFrame(Mlg, index= model_3.classes_)
Mlg.head()

# Precisión del método
print('La precisión del método es: {}'.format(round( accuracy_score(Y_test, y_p_l), 3)))

"""## **KNN**"""

model_4=KNeighborsClassifier(n_neighbors=5, metric='manhattan')
model_4.fit(X_train,Y_train)

y_p_KNN=model_4.predict(X_test)
MKNN = confusion_matrix(Y_test, y_p_KNN)
MKNN = {'Doji': MKNN[:, 0], 'Green': MKNN[:,1], 'Red': MKNN[:,2]}
MKNN = pd.DataFrame(MKNN, index= model_4.classes_)
MKNN.head()

# Precisión del método
print('La precisión del método es: {}'.format(round( accuracy_score(Y_test, y_p_KNN), 3)))

"""# **Randomforest**"""

model_5=RandomForestClassifier(n_estimators=100, random_state=50)
model_5.fit(X_train, Y_train)

y_p_RF=model_5.predict(X_test)
MRF = confusion_matrix(Y_test, y_p_RF)
MRF = {'Doji': MRF[:, 0], 'Green': MRF[:,1], 'Red': MRF[:,2]}
MRF = pd.DataFrame(MRF, index= model_5.classes_)
MRF.head()

# Precisión del método
print('La precisión del método es: {}'.format(round( accuracy_score(Y_test, y_p_RF), 3)))